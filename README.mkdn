# The Currently Nameless LPC55 Bootloader

Status: approaching feature-complete for now.

This is a reimplementation of Oxide's "stage0" LPC55 bootloader that aims to be
more minimal and general.

The reason we need a bootloader is due to a limitation in the chip's boot ROM:
it will perform verified boot against a _single_ location in flash (address
zero). We need A/B firmware images so that we can do an in-system upgrade
safely, but want to retain verified boot. So, this bootloader extends the ROM's
verified boot chain of trust to one of two possible firmware images, depending
on the results of signature checks and some minimal online configuration.

This program refers to itself internally as "stage0" because it is the first
stage of Oxide's RoT boot process, but it probably needs an actual name.

## Really minimal user manual

This will not cover how to get verified boot working on an LPC55; you need to
have already installed your key table hash in the CMPA, etc.

`stage0` should be built and signed and deposited at the start of flash. By
default, it structures the rest of flash into two image slots, each 256 kiB in
length. The first starts at `0x1_0000`, and the second at `0x5_0000`.

`stage0` will do exactly the following:

- Check each firmware slot to see if it contains a valid, fully programmed,
  signed image. The ROM signature check logic is reused, though we perform some
  checks before it to work around some crash-level bugs it contains (sigh).

- If only one slot is valid, boot it (i.e. load its initial stack pointer,
  configure its vector table, and jump to its reset vector).

- If two slots are valid, we have a choice to make. The following factors are
  used to break the tie, in this order:
  - If implemented on the target board, an override button.
  - A location in RAM is checked for a "transient boot override" command, which
    will boot into a particular slot exactly once and then be overwritten.
  - The LSB of the word at offset `0x100` in the most recently written CFPA page
    is the last option. If 0, slot A is booted; if 1, slot B is booted.

`stage0` does not stay resident or require any ongoing resources once it jumps
into your program. This means there's no way to "call into" `stage0` other than
rebooting.


## Building

`cargo build --release` will build for the default target board (which is an
eval board you probably don't have).

To change boards, check `Cargo.toml` for the various `target-board-*` features,
and pass one like this:

`cargo build --release --no-default-features --features target-board-lpcxpresso`

To enable booting unsigned-but-CRC'd images, add the `allow-unsigned-images`
feature.

## Testing

We have some minimal test suites in the form of other binaries in `src/bin`.
Currently, this only covers the crypto hardware drivers.

## Dev workflow

`rust-analyzer` works in this codebase and I intend to keep it that way. Make
sure you've installed the one corresponding to the pinned toolchain, for good
measure.

The `main` branch is protected, code must pass the build before being pushed
there.

This code is structured as a lib crate (most of the files under `src/`) so that
it can be reused by both the real production stage0 binary, and tests.
Production stage0 lives at `src/bin/stage0.rs`; other files in `src/bin` are
test programs. Ideally, more of the code would move into the lib and get tested;
the only parts that really can't are the ones that boot into the chosen image.

## Demo using fake keys and signed images

This has been tested using the LPCXpresso55S69 board.

### Getting Started

You will need the [`lpc55_support`] crate checked out.

- Install a jumper on P1 (near the Debug Link USB connector) to break serial
  connection to the LPCLINK2 because I couldn't get it to work reliably.

- Connect a USB cable to the Debug Link connector for power (and GDB if you need
  it).

- Connect a 3.3V serial cable to P8 (all the way across the board to the right),
  keeping in mind that the legend is from the _host's_ perspective (e.g. TX is
  coming from the host to the LPC55).

- Press and hold the ISP button (far right), and press and release the Reset
  button while holding ISP.

In the `lpc55_support` crate, run this command to check if you're successfully
talking to the bootloader (replace `/dev/ttyUSB0` with the name of your serial
adapter):

```
cargo run --bin lpc55_flash /dev/ttyUSB0 ping
```

### Building stage0 and extracting a bin file

In _this_ repo, run

```
cargo build --release --no-default-features --features target-board-lpcxpresso
arm-none-eabi-objcopy -O binary target/thumbv8m.main-none-eabihf/release/stage0 stage0.bin
```

### Generating a signed stage0

All commands in this section must be executed inside your `lpc55_support`
checkout, and **must all be prefixed with `cargo run --bin`**. I just got tired
of repeating that part.

These commands will reference files in the stage0 repo (home of this README
file). I'll symbolically represent that path as `$STAGE0` below. Either define
an environment variable with the path, or replace it in the commands.

```
lpc55_sign signed-image $STAGE0/stage0.bin \
    $STAGE0/demo/fake_private_key.pem \
    $STAGE0/demo/fake_certificate.der.crt \
    $STAGE0/stage0_signed.bin \
    $STAGE0/stage0_cmpa.bin \
    --cfpa $STAGE0/stage0_cfpa.bin \
```

This will produce two files in `$STAGE0`: `stage0_signed.bin` is a signed
version of the stage0 build, and `stage0_cmpa.bin` is an image containing the
keys to be programmed into the chip's Customer Manufacturing Parameter Area
(CMPA).


### Generating A/B images

Two demo images are included in `$STAGE0/demo`, `slot_a.bin` and `slot_b.bin`.
The slot A image will turn the LED green if it boots; the B image will turn it
blue. This way you can tell them apart.

Currently stage0 is configured to boot either correctly signed images, or
unsigned images with a correct NXP CRC. Let's make one of each!

From `lpc55_support`, sign the demo slot A program using the same key as before,
discarding the CMPA output, and specifying the program's load address (since
we're using bin files, the load addresses are lost):

```
lpc55_sign signed-image $STAGE0/demo/slot_a.bin \
    $STAGE0/demo/fake_private_key.pem \
    $STAGE0/demo/fake_certificate.der.crt \
    $STAGE0/demo/slot_a_signed.bin \
    /dev/null \
    --address 0x10000
```

Then, wrap the slot B program in a CRC image without a signature:

```
lpc55_sign crc $STAGE0/demo/slot_b.bin \
    $STAGE0/demo/slot_b_crc.bin \
    --address 0x50000
```

You should now have `slot_a_signed.bin` and `slot_b_crc.bin` files in
`$STAGE0/demo`.

### Erasing the flash and any existing keys

For good measure let's begin by putting the chip into a fairly pristine state.
This isn't strictly necessary if your board is brand new but doesn't hurt
anything.

```
lpc55_flash /dev/ttyUSB0 erase-cmpa
lpc55_flash /dev/ttyUSB0 flash-erase-all
```

### Loading the keys and CMPA/CFPA contents

This will overwrite the newly-erased CMPA with our certificate:

```
lpc55_flash /dev/ttyUSB0 write-cmpa $STAGE0/stage0_cmpa.bin
lpc55_flash /dev/ttyUSB0 write-cfpa $STAGE0/stage0_cfpa.bin
```

### Programming our images

We now have three separate images that need to be placed at three separate areas
in Flash. We can do that by running the following three commands (in
`lpc55_support`):

```
lpc55_flash /dev/ttyUSB0 write-memory 0 $STAGE0/stage0_signed.bin
lpc55_flash /dev/ttyUSB0 write-memory 0x10000 $STAGE0/demo/slot_a_signed.bin
lpc55_flash /dev/ttyUSB0 write-memory 0x50000 $STAGE0/demo/slot_b_crc.bin
```

### Trying it out and troubleshooting

Hit the RESET button.

You should see the LED light green. This means slot A has been booted, which
means that stage0 successfully verified its signature and chain-loaded it.

Try holding the USER button while you reset the board. The LED should light
blue. This is because stage0 is currently configured to treat the USER button as
an image selection override and prefer slot B if both are present.

If something goes wrong, you'll see one of two results:

- LED lights red: stage0 found no valid images or panicked while verifying them.
  Try performing the steps above again, making sure you didn't skip anything. If
  it still doesn't work please report it.

- LED lights blue without USER button held: stage0 doesn't believe slot A is
  signed correctly. This usually means you forgot to load the keys into the
  CMPA, but could also be an error in the sign command (in particular, make sure
  the load address is specified as given above).

- LED does not turn on: stage0 has failed to start, and is probably sitting in a
  HardFault handler. This usually happens because you failed to program either
  slot A or slot B; stage0 will currently crash if it reads erased flash. If
  both slots are programmed, please report this.


### Rewriting just one image

For stage0:

```
lpc55_flash /dev/ttyUSB0 flash-erase-region 0 0x10000
lpc55_flash /dev/ttyUSB0 write-memory 0 $STAGE0/stage0_signed.bin
```

For slot A:

```
lpc55_flash /dev/ttyUSB0 flash-erase-region 0x10000 0x40000
lpc55_flash /dev/ttyUSB0 write-memory 0x10000 $STAGE0/demo/slot_a_signed.bin
```

For slot B:

```
lpc55_flash /dev/ttyUSB0 flash-erase-region 0x50000 0x40000
lpc55_flash /dev/ttyUSB0 write-memory 0x50000 $STAGE0/demo/slot_b_crc.bin
```

This also gives you the opportunity to experiment with installing signed,
unsigned, or even entirely bogus images to see what stage0 does.

If you erase slot A or B and attempt to boot, stage0 will currently crash (see
above). If you erase stage0 and attempt to boot, you'll end up in the
bootloader.

### Getting DICE to work

If you follow the instructions above, we will provide a DICE CDI to the
next-stage software, but it will be based _solely_ on the next stage software
and won't include any measurement of the ROM or stage0. This is because the ROM
DICE support is turned off by default. Enabling it takes some _doing._

You will need:
- A CMPA image indicating that DICE should be enabled.
- A valid CFPA image.
- To enroll the PUF and generate the UDS.

These instructions assume `$STAGE0/stage0.bin` is the binary stage0 extracted
during a previous build step. We need to sign it _slightly differently_ to get
the CFPA and then run some other steps. From `lpc55_support`, and again
prefixing each command with `cargo run --bin`, do:

```
lpc55_sign signed-image $STAGE0/stage0.bin \
    $STAGE0/demo/fake_private_key.pem \
    $STAGE0/demo/fake_certificate.der.crt \
    $STAGE0/stage0_signed.bin \
    $STAGE0/stage0_cmpa.bin \
    --cfpa $STAGE0/stage0_cfpa.bin \
    --with-dice \
    --with-dice-inc-nxp-cfg \
    --with-dice-cust-cfg \
    --with-dice-inc-sec-epoch

lpc55_flash /dev/ttyUSB0 erase-cmpa

lpc55_flash /dev/ttyUSB0 write-cmpa $STAGE0/stage0_cmpa.bin

lpc55_flash /dev/ttyUSB0 write-cfpa \
    $STAGE0/stage0_cfpa.bin \
    --update-version

lpc55_flash /dev/ttyUSB0 erase-key-store
lpc55_flash /dev/ttyUSB0 enroll
lpc55_flash /dev/ttyUSB0 generate-uds
lpc55_flash /dev/ttyUSB0 write-key-store
```

If you reboot, it should behave exactly the same as the previous signed stage0.
Currently you need a debugger to tell the difference. To verify that DICE is on,

1. Set a breakpoint at `main` in stage0.
2. Dump 8 registers starting at `0x5000_0900` (in pyocd: `read32 0x50000900 32`)
3. Resume the program and let it boot
4. Halt it again.
5. Dump the same registers.

In both dumps, the registers should appear random, and the second dump should be
different from the first.

If DICE is _not_ successfully enabled, the first dump will be all zeros.

[`lpc55_support`]: https://github.com/oxidecomputer/lpc55_support/
